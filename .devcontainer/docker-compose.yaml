# your file should look like this
services:
  # Update this to the name of the service you want to work with in your docker-compose.yml file
  your-service-name-here:
    # If you want add a non-root user to your Dockerfile, you can use the "remoteUser"
    # property in devcontainer.json to cause VS Code its sub-processes (terminals, tasks, 
    # debugging) to execute as the user. Uncomment the next line if you want the entire 
    # container to run as this user instead. Note that, on Linux, you may need to 
    # ensure the UID and GID of the container user you create matches your local user. 
    # See https://aka.ms/vscode-remote/containers/non-root for details.
    #
    user: worker

    # Uncomment if you want to override the service's Dockerfile to one in the .devcontainer 
    # folder. Note that the path of the Dockerfile and context is relative to the *primary* 
    # docker-compose.yml file (the first in the devcontainer.json "dockerComposeFile"
    # array). The sample below assumes your primary file is in the root of your project.
    #
    build:
      context: .
      dockerfile: Dockerfile

    volumes:
      # Update this to wherever you want VS Code to mount the folder of your project
      - ..:/investpulse.net:cached

      # Uncomment the next line to use Docker from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker-compose for details.
      # Note: I use docker-in-docker devcontainer extension, what is maybe less effective but it works out of the box and separated devcontainer from host
      # - /var/run/docker.sock:/var/run/docker.sock 

    # Uncomment the next four lines if you will use a ptrace-based debugger like C++, Go, and Rust.
    # cap_add:
    #   - SYS_PTRACE
    # security_opt:
    #   - seccomp:unconfined

    # Overrides default command so things don't shut down after the process ends.
    command: /bin/sh -c "while sleep 1000; do :; done"
    
    # other definitions
    # extra_hosts: 
    #   # This maps your localhost from your machine host to a name host.docker.internal. Now substitute all occurrences of localhost to host.docker.internal and it's done!
    #   # So if you've been connecting to your database using localhost:27017 as the conn URL, you'll need to change it to host.docker.internal:27071, for example.
    #   - "host.docker.internal:host-gateway"

  # minikube:
  #   image: gcr.io/k8s-minikube/kicbase:v0.0.30
  #   privileged: true
  #   command: /bin/sh -c "while sleep 1000; do :; done"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /var/lib/minikube:/var/lib/minikube
  #   environment:
  #     - CHANGE_MINIKUBE_NONE_USER=true
  #     - KUBECONFIG=/var/lib/minikube/kubeconfig