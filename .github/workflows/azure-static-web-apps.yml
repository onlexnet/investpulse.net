# Azure Static Web Apps - Preview Workflow
# ----------------------------------------
# This workflow builds and deploys a preview version of the frontend (webapp/)
# to Azure Static Web Apps for every change iin master branch
# Only changes in 'webapp/**' trigger this workflow.
# ----------------------------------------

name: Azure Static Web Apps

on:
  push:
    branches:
      - main
    paths:
      - 'webapp/**'
      - '.github/workflows/azure-static-web-apps.yml'

jobs:
  build_and_deploy_preview:
    runs-on: ubuntu-latest
    name: Build and Deploy WebApp
    environment: 
      name: 'dev'
      url: ${{ steps.builddeploy.outputs.static_web_app_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          lfs: false
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          # node version same as used in development
          node-version: '22' 
          cache: 'npm'
          cache-dependency-path: webapp/package-lock.json
      
      - name: Install dependencies
        run: |
          cd webapp
          npm ci
      
      - name: Build static app
        run: |
          cd webapp
          npm run build:static
        env:
          NODE_ENV: ${{ (github.base_ref == 'main') && 'dev' || 'preview' }}
      
      - name: Deploy to Azure Static Web Apps
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for GitHub integrations (i.e. PR comments)
          action: "upload"
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: "/webapp" # App source code path
          api_location: "" # Api source code path - optional
          output_location: "out" # Built app content directory - optional
          ###### End of Repository/Build Configurations ######

      - name: Verify deployment
        if: steps.builddeploy.outcome == 'success'
        run: |
          echo "Deployment completed successfully"
          echo "App URL: ${{ steps.builddeploy.outputs.static_web_app_url }}"
          
          # Wait a moment for deployment to be ready
          sleep 10
          
          # Verify the deployment is accessible
          if [ -n "${{ steps.builddeploy.outputs.static_web_app_url }}" ]; then
            echo "Testing deployment accessibility..."
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.builddeploy.outputs.static_web_app_url }}" || echo "000")
            echo "HTTP Status: $HTTP_STATUS"
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "✅ Deployment verification successful - App is accessible"
            else
              echo "⚠️ Deployment verification warning - App returned HTTP $HTTP_STATUS"
              echo "This might be normal for a new deployment that needs time to propagate"
            fi
          else
            echo "⚠️ No deployment URL available for verification"
          fi
          
          # Add deployment info to job summary
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## 🚀 Deployment Summary
          
          **Environment:** ${{ (github.base_ref == 'main') && 'dev' || 'preview' }}
          **URL:** ${{ steps.builddeploy.outputs.static_web_app_url }}
          **Target Branch:** ${{ github.base_ref }}
          **Status:** ✅ Deployed Successfully
          EOF

      - name: Comment deployment info on PR
        if: steps.builddeploy.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ (github.base_ref == 'main') && 'dev' || 'preview' }}';
            const deploymentUrl = '${{ steps.builddeploy.outputs.static_web_app_url }}';
            const targetBranch = '${{ github.base_ref }}';
            
            const isDevEnvironment = environment === 'dev1';
            const noteText = isDevEnvironment ? '\n\n🔔 Note: This PR targets a main branch and has been deployed to the dev1 environment.' : '';
            
            const commentBody = `## 🚀 Preview Deployment Ready!\n\nEnvironment: \`${environment}\`\nTarget Branch: \`${targetBranch}\`\nDeployment URL: ${deploymentUrl}\n\nYour changes have been deployed and are ready for review! 🎉${noteText}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

